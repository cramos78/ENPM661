			8-PUZZLE NODE
			
			=============


OBJECTIVE:

==========

This program uses the BFS algorithm to backtrack a path between an input puzzle node and the target goal node.

INPUTS TO PROGRAM: 

==================

This program uses 2 variables that can be changed in order to test new Use Cases. 
The following variables are:

1.Start_Node : 2D list

2.Goal_Node  : 2D list



Puzzle example:   
2 8 3 
                  
1 6 4
                  
7 0 5


Must be entered as PuzzleNode([[2, 8, 3], [1, 6, 4], [7, 0, 5]]) 


HOW TO RUN PROGRAM:
===================
In the window terminal type:
python proj1_christian_ramos.py <enter>

NOTE: Make sure to modify the 2 inputs above to get desired start and goal puzzles.



MAIN PROGRAM DESCRIPTION:

=========================

The main program begins by declaring the dictionary Matrix_8puzzle_Nodes which will contain the explored nodes as PuzzleNode objects.

The 2 inputs will be Start_Node and Goal_Node for the user to enter the desired start puzzle node and goal puzzle node.

The program then checks for solvability of the start puzzle. If puzzle is solvable then program will continue to run to find nodes path to goal puzzle node.
Otherwise program will print message to user stating that Input puzzle has no solution.

If puzzle is solvable then the start node is added to Matrix_8puzzle_Nodes while its blank tile location is determined as pair of row,column coordinates and saved to its node properties.

The program then starts testing all possible directions for start node to create a new node based on moves made on certain direction. 
Once the new node is created, the program iterates for up to 200,000 if needed in order to find nodes path. 
Although a maximum number of permutations is in the vicinity of 360,000 in order to have non-repeated nodes, we can only get half the maximum number of permutations. 
Inside the for loop I start generating new nodes from previous nodes based on direction of move but also making sure no repeated nodes are added to main list containing explored nodes. 
Also I made sure that the future move does not move the puzzle to previous move of current position as part of the algorithm. 
Once, goal node is been found, backtracking function is applied to generate node path list and also text files are generated containing the information of explored nodes,etc as per project instructions. 
As an extra feature I also output the time it takes for the main program to run in seconds.    



FUNCTIONS DESCRIPTION:

======================

Class Puzzle Node: This class object stores the current puzzle and its properties such as:

Node_State_i : Stores the puzzle as a 2D list.

Node_State_i_Int : Stores the puzzle as an int value for optimization purposes.

Node_Index_i : Stores the puzzle current index

Parent_Node_Index_i : Stores the parent puzzle index number

BlankTileIndex : Stores the location of the 0 value in the puzzle
 


conv2Dto1D : Converts the input puzzle that is formatted as 2D list into a 1D list



isPuzzleSolvable: It tests whether given a start node, the program is able to reach the desired goal node. 
By counting the number of inversions in the start node and goal node, if both puzzles contain even number of inversions or odd number of inversions (both even inversions or both odd inversions), the function will return a true value and allow for the rest of the program to continue. 
If the function determines that the puzzle is not solvable, the it warns the user that the puzzle is not solvable and terminates.



verifyGoalNode : Checks to see if the goal node is been reached by comparing whether the current node and goal node are same.



BlankTileLocation : Locates the 0 value in the puzzle in terms of row and column. 



AddNodeInt : Adds the current puzzle Node to a list containing all nodes explored so far. This function checks that the current puzzle node does not already exist in the list of puzzle nodes before adding it. 
If it is already repeated in the list then it does not added. 



puzzleNodeToInt : Converts the 2D current puzzle node to an integer for optimization purposes.



ActionMoveLeft : This function moves the blank tile to the left position and saves the new node generated by the left move into the list containing all explored nodes (as long as it is not repeated).



ActionMoveUp : This function moves the blank tile to the Up position and saves the new node generated by the Up move into the list containing all explored nodes (as long as it is not repeated).



ActionMoveRight : This function moves the blank tile to the right position and saves the new node generated by the right move into the list containing all explored nodes (as long as it is not repeated).



ActionMoveDown : This function moves the blank tile to the Down position and saves the new node generated by the Down move into the list containing all explored nodes (as long as it is not repeated).



NoMoveLeft : This function tries all possible moves for the blank tile of current puzzle node except for the left move.



NoMoveUp : This function tries all possible moves for the blank tile of current puzzle node except for the Up move.



NoMoveRight : This function tries all possible moves for the blank tile of current puzzle node except for the right move.



NoMoveDown : This function tries all possible moves for the blank tile of current puzzle node except for the Down move.



backTrackingNodePath : This function backtracks the Puzzle Node Path from the starting node to the goal node. 
It makes use of the goal node index and its parent index to backtrack previous nodes and repeats the process until it reaches the starting node saving these nodes in a list that gets reverse afterwards.



savePuzzleToNodePathFile : It saves the Nodes Path List to a file named nodePath.txt . 
When it saves the nodes path to the file, it uses the column wise format as indicated by the project instructions.



savePuzzleToNodesFile : It saves the explored Nodes to a file named Nodes.txt . 
When it saves the nodes to the file, it uses the column wise format as indicated by the project instructions.



savePuzzleToNodesInfoFile : It saves the explored node indexes and their parent indexes to a file named NodesInfo.txt


 
